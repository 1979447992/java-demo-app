name: CI/CD Pipeline
on:
  push:
    branches: [ main ]
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
    
    - name: Build with Maven
      run: mvn clean package
    
    - name: Configure Docker and Login to Harbor
      run: |
        echo "=== Configure insecure registry ==="
        sudo mkdir -p /etc/docker
        echo '{"insecure-registries":["47.83.206.116:30002"]}' | sudo tee /etc/docker/daemon.json
        
        echo "=== Restart Docker ==="
        sudo systemctl restart docker
        sleep 20
        
        echo "=== Login to Harbor ==="
        echo "${{ secrets.HARBOR_PASSWORD }}" | docker login 47.83.206.116:30002 -u "${{ secrets.HARBOR_USERNAME }}" --password-stdin
        
        echo "=== Docker setup completed ==="
        
    - name: Build and Push Docker Image
      run: |
        echo "=== Building Docker image ==="
        docker build -t 47.83.206.116:30002/library/demo-app:${{ github.sha }} .
        
        echo "=== Pushing Docker image ==="
        docker push 47.83.206.116:30002/library/demo-app:${{ github.sha }}
        
        echo "=== Image pushed: 47.83.206.116:30002/library/demo-app:${{ github.sha }} ==="
        
    - name: Update Kubernetes Deployment
      env:
        GITHUB_TOKEN: ${{ secrets.K8S_GIT_TOKEN }}
      run: |
        echo "=== Cloning k8s config repository ==="
        git clone https://${GITHUB_TOKEN}@github.com/1979447992/k8s-config-repo.git
        cd k8s-config-repo
        
        echo "=== Configuring git ==="
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        
        echo "=== Current deployment.yaml content ==="
        cat demo-app/deployment.yaml | grep -A 2 -B 2 "image:"
        
        echo "=== Updating image tag in deployment.yaml ==="
        # 🔥 关键修改：使用 ${{ github.sha }} 而不是硬编码的hash
        sed -i "s|image: 47.83.206.116:30002/library/demo-app:.*|image: 47.83.206.116:30002/library/demo-app:${{ github.sha }}|g" demo-app/deployment.yaml
        
        echo "=== Updated deployment.yaml content ==="
        cat demo-app/deployment.yaml | grep -A 2 -B 2 "image:"
        
        echo "=== Committing changes ==="
        git add .
        git commit -m "Update demo-app image to ${{ github.sha }}"
        
        echo "=== Pushing changes ==="
        git push https://${GITHUB_TOKEN}@github.com/1979447992/k8s-config-repo.git main
        
        echo "=== Kubernetes deployment updated successfully ==="



    - name: Trigger ArgoCD Refresh
      run: |
        echo "=== 触发 ArgoCD 应用立即同步 ==="
        
        # 1. 获取 ArgoCD 登录令牌
        #    使用 secrets.ARGOCD_PASSWORD 来安全地传递密码
        echo "正在获取 ArgoCD 登录令牌..."
        ARGO_TOKEN=$(curl -s -k -X POST \
          -H 'Content-Type: application/json' \
          -d '{"username":"admin","password":"${{ secrets.ARGOCD_PASSWORD }}"}' \
          'https://47.83.206.116:30443/api/v1/session' | jq -r .token)
        
        # 2. 检查令牌是否获取成功
        if [ "$ARGO_TOKEN" == "null" ] || [ -z "$ARGO_TOKEN" ]; then
          echo "错误：无法获取 ArgoCD 登录令牌。"
          echo "请检查 ARGOCD_PASSWORD secret 是否正确配置以及 Argo CD 服务的网络连接。"
          exit 1
        fi
        
        echo "成功获取令牌，准备立即同步应用: demo-app"
        
        # 3. 使用令牌触发应用同步 (Sync)
        #    - 端点已从 /refresh 修改为 /sync
        #    - 使用 -w 和 tail/sed 分离 HTTP 状态码，进行更可靠的检查
        SYNC_RESPONSE=$(curl -s -k -X POST \
          -H "Authorization: Bearer $ARGO_TOKEN" \
          -H "Content-Type: application/json" \
          -w "\nHTTP_STATUS:%{http_code}" \
          "https://47.83.206.116:30443/api/v1/applications/demo-app/sync")
          
        # 4. 提取 HTTP 状态码和响应体
        HTTP_STATUS=$(echo "$SYNC_RESPONSE" | tail -n1 | cut -d: -f2)
        RESPONSE_BODY=$(echo "$SYNC_RESPONSE" | sed '$d')

        echo "同步 API 响应体: $RESPONSE_BODY"
        echo "同步 API HTTP 状态码: $HTTP_STATUS"

        # 5. 根据 HTTP 状态码判断操作结果
        if [ "$HTTP_STATUS" -eq 200 ]; then
          echo "成功：ArgoCD 应用 'demo-app' 同步请求已成功发送。"
          # 可选：可以增加一个短暂的等待和检查步骤，确认同步是否真的完成
          exit 0
        else
          echo "失败：ArgoCD 应用同步请求失败。请检查响应体和状态码获取详细信息。"
          exit 1
        fi
        echo "ArgoCD 应用刷新触发成功。"
    





    




